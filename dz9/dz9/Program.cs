//Задание по события: Создать класс Покупателя, у которого будет поле "Кошелек".
//В нём будет хранится какая-то сумма денег. Также будут 2 метода, которые заполняют
//кошелек деньгами(функция будет иметь параметр в виде количества денег), и функция
//которая достает деньги из кошелька(также с параметром). Также нужно реализовать
//событие, которое будет срабатывать при при Уменьшении или добавлении денег в
//кошелёк выводить нынешнее количество денег. Задание на дженерики: Создать
//интрефейс IPoint, который хранит в себе два инт поля: X и Y, Далее реализовать
//класс Поинт, который реализовал интерфейс IPoint, далее создать класс Line,
//который наследуется от Поинт и добавить еще X2 и Y2. Реализовать функцию, которая
//устанавливает значение X и Y. Функция должна работать для классов и интерфейсов,
//которые реализовали IPoint. Задание на Linq: Реализовать класс Пользователей, в
//котором есть поле фамилии, имени, возраста и кошелька. Создать лист из 20 таких
//пользователей. Далее Реализовать следующие функции: 1.Вывод пользователя с наименьшим количеством денег 2.вывод пользователя с наибольшим количеством денег 3.вывести среднее значение всех денег пользователей 4.Отсортировать пользователей по возрасту(от самого старого, до самого младшего) 5. Отсортировать покупателей сначала по кошелек, а затем по возрасту(если кошелек 2-х пользователей одинаковый, то сначала должен стоять тот, кто старше). 

using System.Diagnostics.CodeAnalysis;

//public class Customer
//{
//    double wallet;
//    public void GetSum(double amount)
//    {

//    }
//    public void SetSum(double amount)
//    {
        
//    }
//}

////Задание на Linq: Реализовать класс Пользователей, в котором есть поле фамилии,
//имени, возраста и кошелька. Создать лист из 20 таких пользователей. Далее
//Реализовать следующие функции: 1.Вывод пользователя с наименьшим количеством денег
//2.вывод пользователя с наибольшим количеством денег 3.вывести среднее значение
//всех денег пользователей 4.Отсортировать пользователей по возрасту(от самого
//старого, до самого младшего) 5. Отсортировать покупателей сначала по кошелек,
//а затем по возрасту(если кошелек 2-х пользователей одинаковый, то сначала должен
//стоять тот, кто старше)
List<Users> users = new List<Users>();
users.Add(new Users("maria", "pepperoni", 122.89, 10));
users.Add(new Users("mana", "para", 34.8, 6));
//1
var minMoney = users.Min(u => u.Wallet);
Console.WriteLine(minMoney);
//2
var maxMoney = users.Max(u => u.Wallet);
Console.WriteLine(maxMoney);
class Users
{ 
    public string LastName { get; set; }
    public string FirstName { get; set; }
    public double Wallet { get; set; }
    public int Age { get; set; }
    public Users(string lname, string fname, double wa, int age) 
    { 
        LastName = lname;
        FirstName = fname;
        Wallet = wa;
        Age = age;  
    }

}
